[2024-10-14 16:26:37,137] - [phase.py file line:195] - INFO: **[Seminar Conclusion]**:

 **unittest_add.py**
```python
'''
Unit tests for addition functionality.
'''

import unittest
from utils import add

class TestAddFunctionality(unittest.TestCase):
    def test_add_positive_numbers(self):
        self.assertEqual(add(2, 3), 5)

    def test_add_negative_numbers(self):
        self.assertEqual(add(-2, -3), -5)

    def test_add_mixed_numbers(self):
        self.assertEqual(add(-2, 3), 1)

    def test_add_zero(self):
        self.assertEqual(add(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(add("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_subtract.py**
```python
'''
Unit tests for subtraction functionality.
'''

import unittest
from utils import subtract

class TestSubtractFunctionality(unittest.TestCase):
    def test_subtract_positive_numbers(self):
        self.assertEqual(subtract(5, 3), 2)

    def test_subtract_negative_numbers(self):
        self.assertEqual(subtract(-5, -3), 2)

    def test_subtract_mixed_numbers(self):
        self.assertEqual(subtract(-5, 3), -8)

    def test_subtract_zero(self):
        self.assertEqual(subtract(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(subtract("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_multiply.py**
```python
'''
Unit tests for multiplication functionality.
'''

import unittest
from utils import multiply

class TestMultiplyFunctionality(unittest.TestCase):
    def test_multiply_positive_numbers(self):
        self.assertEqual(multiply(5, 3), 15)

    def test_multiply_negative_numbers(self):
        self.assertEqual(multiply(-5, -3), 15)

    def test_multiply_mixed_numbers(self):
        self.assertEqual(multiply(-5, 3), -15)

    def test_multiply_zero(self):
        self.assertEqual(multiply(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(multiply("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_divide.py**
```python
'''
Unit tests for division functionality.
'''

import unittest
from utils import divide

class TestDivideFunctionality(unittest.TestCase):
    def test_divide_positive_numbers(self):
        self.assertEqual(divide(10, 2), 5)

    def test_divide_negative_numbers(self):
        with self.assertRaises(ZeroDivisionError):
            divide(-10, -2)

    def test_divide_mixed_numbers(self):
        self.assertEqual(divide(-10, 2), -5)

    def test_divide_zero(self):
        with self.assertRaises(ZeroDivisionError):
            divide(0, 0)

    def test_invalid_input(self):
        self.assertEqual(divide("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_main.py**
```python
'''
Main entry point for unit tests.
'''

import unittest
from unittest_add import TestAddFunctionality
from unittest_subtract import TestSubtractFunctionality
from unittest_multiply import TestMultiplyFunctionality
from unittest_divide import TestDivideFunctionality

def run_all_tests():
    unittest.main()

if __name__ == "__main__":
    run_all_tests()
```
[2024-10-14 16:26:37,137] - [phase.py file line:195] - INFO: **[Seminar Conclusion]**:

 **unittest_add.py**
```python
'''
Unit tests for addition functionality.
'''

import unittest
from utils import add

class TestAddFunctionality(unittest.TestCase):
    def test_add_positive_numbers(self):
        self.assertEqual(add(2, 3), 5)

    def test_add_negative_numbers(self):
        self.assertEqual(add(-2, -3), -5)

    def test_add_mixed_numbers(self):
        self.assertEqual(add(-2, 3), 1)

    def test_add_zero(self):
        self.assertEqual(add(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(add("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_subtract.py**
```python
'''
Unit tests for subtraction functionality.
'''

import unittest
from utils import subtract

class TestSubtractFunctionality(unittest.TestCase):
    def test_subtract_positive_numbers(self):
        self.assertEqual(subtract(5, 3), 2)

    def test_subtract_negative_numbers(self):
        self.assertEqual(subtract(-5, -3), 2)

    def test_subtract_mixed_numbers(self):
        self.assertEqual(subtract(-5, 3), -8)

    def test_subtract_zero(self):
        self.assertEqual(subtract(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(subtract("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_multiply.py**
```python
'''
Unit tests for multiplication functionality.
'''

import unittest
from utils import multiply

class TestMultiplyFunctionality(unittest.TestCase):
    def test_multiply_positive_numbers(self):
        self.assertEqual(multiply(5, 3), 15)

    def test_multiply_negative_numbers(self):
        self.assertEqual(multiply(-5, -3), 15)

    def test_multiply_mixed_numbers(self):
        self.assertEqual(multiply(-5, 3), -15)

    def test_multiply_zero(self):
        self.assertEqual(multiply(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(multiply("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_divide.py**
```python
'''
Unit tests for division functionality.
'''

import unittest
from utils import divide

class TestDivideFunctionality(unittest.TestCase):
    def test_divide_positive_numbers(self):
        self.assertEqual(divide(10, 2), 5)

    def test_divide_negative_numbers(self):
        with self.assertRaises(ZeroDivisionError):
            divide(-10, -2)

    def test_divide_mixed_numbers(self):
        self.assertEqual(divide(-10, 2), -5)

    def test_divide_zero(self):
        with self.assertRaises(ZeroDivisionError):
            divide(0, 0)

    def test_invalid_input(self):
        self.assertEqual(divide("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_main.py**
```python
'''
Main entry point for unit tests.
'''

import unittest
from unittest_add import TestAddFunctionality
from unittest_subtract import TestSubtractFunctionality
from unittest_multiply import TestMultiplyFunctionality
from unittest_divide import TestDivideFunctionality

def run_all_tests():
    unittest.main()

if __name__ == "__main__":
    run_all_tests()
```
[2024-10-14 16:26:37,137] - [phase.py file line:195] - INFO: **[Seminar Conclusion]**:

 **unittest_add.py**
```python
'''
Unit tests for addition functionality.
'''

import unittest
from utils import add

class TestAddFunctionality(unittest.TestCase):
    def test_add_positive_numbers(self):
        self.assertEqual(add(2, 3), 5)

    def test_add_negative_numbers(self):
        self.assertEqual(add(-2, -3), -5)

    def test_add_mixed_numbers(self):
        self.assertEqual(add(-2, 3), 1)

    def test_add_zero(self):
        self.assertEqual(add(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(add("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_subtract.py**
```python
'''
Unit tests for subtraction functionality.
'''

import unittest
from utils import subtract

class TestSubtractFunctionality(unittest.TestCase):
    def test_subtract_positive_numbers(self):
        self.assertEqual(subtract(5, 3), 2)

    def test_subtract_negative_numbers(self):
        self.assertEqual(subtract(-5, -3), 2)

    def test_subtract_mixed_numbers(self):
        self.assertEqual(subtract(-5, 3), -8)

    def test_subtract_zero(self):
        self.assertEqual(subtract(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(subtract("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_multiply.py**
```python
'''
Unit tests for multiplication functionality.
'''

import unittest
from utils import multiply

class TestMultiplyFunctionality(unittest.TestCase):
    def test_multiply_positive_numbers(self):
        self.assertEqual(multiply(5, 3), 15)

    def test_multiply_negative_numbers(self):
        self.assertEqual(multiply(-5, -3), 15)

    def test_multiply_mixed_numbers(self):
        self.assertEqual(multiply(-5, 3), -15)

    def test_multiply_zero(self):
        self.assertEqual(multiply(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(multiply("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_divide.py**
```python
'''
Unit tests for division functionality.
'''

import unittest
from utils import divide

class TestDivideFunctionality(unittest.TestCase):
    def test_divide_positive_numbers(self):
        self.assertEqual(divide(10, 2), 5)

    def test_divide_negative_numbers(self):
        with self.assertRaises(ZeroDivisionError):
            divide(-10, -2)

    def test_divide_mixed_numbers(self):
        self.assertEqual(divide(-10, 2), -5)

    def test_divide_zero(self):
        with self.assertRaises(ZeroDivisionError):
            divide(0, 0)

    def test_invalid_input(self):
        self.assertEqual(divide("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_main.py**
```python
'''
Main entry point for unit tests.
'''

import unittest
from unittest_add import TestAddFunctionality
from unittest_subtract import TestSubtractFunctionality
from unittest_multiply import TestMultiplyFunctionality
from unittest_divide import TestDivideFunctionality

def run_all_tests():
    unittest.main()

if __name__ == "__main__":
    run_all_tests()
```
[2024-10-14 16:26:37,137] - [phase.py file line:195] - INFO: **[Seminar Conclusion]**:

 **unittest_add.py**
```python
'''
Unit tests for addition functionality.
'''

import unittest
from utils import add

class TestAddFunctionality(unittest.TestCase):
    def test_add_positive_numbers(self):
        self.assertEqual(add(2, 3), 5)

    def test_add_negative_numbers(self):
        self.assertEqual(add(-2, -3), -5)

    def test_add_mixed_numbers(self):
        self.assertEqual(add(-2, 3), 1)

    def test_add_zero(self):
        self.assertEqual(add(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(add("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_subtract.py**
```python
'''
Unit tests for subtraction functionality.
'''

import unittest
from utils import subtract

class TestSubtractFunctionality(unittest.TestCase):
    def test_subtract_positive_numbers(self):
        self.assertEqual(subtract(5, 3), 2)

    def test_subtract_negative_numbers(self):
        self.assertEqual(subtract(-5, -3), 2)

    def test_subtract_mixed_numbers(self):
        self.assertEqual(subtract(-5, 3), -8)

    def test_subtract_zero(self):
        self.assertEqual(subtract(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(subtract("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_multiply.py**
```python
'''
Unit tests for multiplication functionality.
'''

import unittest
from utils import multiply

class TestMultiplyFunctionality(unittest.TestCase):
    def test_multiply_positive_numbers(self):
        self.assertEqual(multiply(5, 3), 15)

    def test_multiply_negative_numbers(self):
        self.assertEqual(multiply(-5, -3), 15)

    def test_multiply_mixed_numbers(self):
        self.assertEqual(multiply(-5, 3), -15)

    def test_multiply_zero(self):
        self.assertEqual(multiply(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(multiply("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_divide.py**
```python
'''
Unit tests for division functionality.
'''

import unittest
from utils import divide

class TestDivideFunctionality(unittest.TestCase):
    def test_divide_positive_numbers(self):
        self.assertEqual(divide(10, 2), 5)

    def test_divide_negative_numbers(self):
        with self.assertRaises(ZeroDivisionError):
            divide(-10, -2)

    def test_divide_mixed_numbers(self):
        self.assertEqual(divide(-10, 2), -5)

    def test_divide_zero(self):
        with self.assertRaises(ZeroDivisionError):
            divide(0, 0)

    def test_invalid_input(self):
        self.assertEqual(divide("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_main.py**
```python
'''
Main entry point for unit tests.
'''

import unittest
from unittest_add import TestAddFunctionality
from unittest_subtract import TestSubtractFunctionality
from unittest_multiply import TestMultiplyFunctionality
from unittest_divide import TestDivideFunctionality

def run_all_tests():
    unittest.main()

if __name__ == "__main__":
    run_all_tests()
```
[2024-10-14 16:26:37,137] - [phase.py file line:195] - INFO: **[Seminar Conclusion]**:

 **unittest_add.py**
```python
'''
Unit tests for addition functionality.
'''

import unittest
from utils import add

class TestAddFunctionality(unittest.TestCase):
    def test_add_positive_numbers(self):
        self.assertEqual(add(2, 3), 5)

    def test_add_negative_numbers(self):
        self.assertEqual(add(-2, -3), -5)

    def test_add_mixed_numbers(self):
        self.assertEqual(add(-2, 3), 1)

    def test_add_zero(self):
        self.assertEqual(add(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(add("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_subtract.py**
```python
'''
Unit tests for subtraction functionality.
'''

import unittest
from utils import subtract

class TestSubtractFunctionality(unittest.TestCase):
    def test_subtract_positive_numbers(self):
        self.assertEqual(subtract(5, 3), 2)

    def test_subtract_negative_numbers(self):
        self.assertEqual(subtract(-5, -3), 2)

    def test_subtract_mixed_numbers(self):
        self.assertEqual(subtract(-5, 3), -8)

    def test_subtract_zero(self):
        self.assertEqual(subtract(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(subtract("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_multiply.py**
```python
'''
Unit tests for multiplication functionality.
'''

import unittest
from utils import multiply

class TestMultiplyFunctionality(unittest.TestCase):
    def test_multiply_positive_numbers(self):
        self.assertEqual(multiply(5, 3), 15)

    def test_multiply_negative_numbers(self):
        self.assertEqual(multiply(-5, -3), 15)

    def test_multiply_mixed_numbers(self):
        self.assertEqual(multiply(-5, 3), -15)

    def test_multiply_zero(self):
        self.assertEqual(multiply(0, 0), 0)

    def test_invalid_input(self):
        self.assertEqual(multiply("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_divide.py**
```python
'''
Unit tests for division functionality.
'''

import unittest
from utils import divide

class TestDivideFunctionality(unittest.TestCase):
    def test_divide_positive_numbers(self):
        self.assertEqual(divide(10, 2), 5)

    def test_divide_negative_numbers(self):
        with self.assertRaises(ZeroDivisionError):
            divide(-10, -2)

    def test_divide_mixed_numbers(self):
        self.assertEqual(divide(-10, 2), -5)

    def test_divide_zero(self):
        with self.assertRaises(ZeroDivisionError):
            divide(0, 0)

    def test_invalid_input(self):
        self.assertEqual(divide("a", 2), "Error: Both inputs must be numbers")

if __name__ == "__main__":
    unittest.main()
```

**unittest_main.py**
```python
'''
Main entry point for unit tests.
'''

import unittest
from unittest_add import TestAddFunctionality
from unittest_subtract import TestSubtractFunctionality
from unittest_multiply import TestMultiplyFunctionality
from unittest_divide import TestDivideFunctionality

def run_all_tests():
    unittest.main()

if __name__ == "__main__":
    run_all_tests()
```
